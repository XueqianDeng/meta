##################################################
# This file allows you to visualize the effects of real-time filtering on MAV signals and cursor position
#
# This code uses data generated by pointing_collection.py
##################################################

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
import pickle

# import EMG data
df = pd.read_csv("data/point_training.csv")
X = df.iloc[:, :16]  # extract data from 16 wristband channels
Nsamples = X.shape[0]

# import model to decode cursor position from EMG activity
with open('data/pointing_linear.pkl', 'rb') as f:
    model = pickle.load(f)

Fs = 144  # sampling rate
cutoff = 3
b, a = signal.butter(N=5, Wn=cutoff, btype='lowpass', fs=Fs)  # set parameters for Butterworth filter

step = 100  # size of window to apply filter
Nchannels = 16  # number of wristband channels
z = pd.DataFrame(index=range(Nsamples - step), columns=['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12',
                                   'C13', 'C14', 'C15', 'C16'])

# set initial conditions for lfilter
zi = signal.lfilter_zi(b, a)

# filter MAV sequentially over a sliding window
for j in range(Nchannels):
    y = X.iloc[:, j]  # extract data from a single channel
    for i in range(Nsamples - step):
        window, _ = signal.lfilter(b, a, y[i:i + step], zi=zi * y[i])  # filter over a time window
        z.iloc[i, j] = window[-1]  # set the filtered MAV to be the last sample in the window

# compute cursor positions from filtered and unfiltered data
pos_unfiltered = model.predict(X)
pos_filtered = model.predict(z)

# plot unfiltered and filtered MAV
plt.figure(1)
increment = 20
start = increment + 1
stop = Nsamples + 1
x_unfiltered = np.arange(start, stop)
x_filtered = np.arange(start + step, stop)

for j in range(Nchannels):
    plt.subplot(4, 4, j+1)
    plt.plot(x_unfiltered, X.iloc[increment:, j])
    plt.plot(x_filtered, z.iloc[increment:, j])
    if j == 1:
        plt.title('Unfiltered vs filtered MAV')
    elif j == 13:
        plt.xlabel('Sample number')
plt.legend(['Unfiltered', 'Filtered'])

# plot unfiltered and filtered cursor position
plt.figure(2)
for j in range(2):
    plt.subplot(2, 1, j+1)
    plt.plot(x_unfiltered, pos_unfiltered[increment:, j])
    plt.plot(x_filtered, pos_filtered[increment:, j])
    if j == 0:
        plt.ylabel('X position')
    else:
        plt.ylabel('Y position')
plt.xlabel('Sample number')
plt.legend(['Unfiltered', 'Filtered'])

w, h = signal.freqz(b, a,)
plt.figure(3)
plt.plot(0.5*Fs*w/np.pi, np.abs(h), 'b')
plt.plot(cutoff, 0.5*np.sqrt(2), 'ko')
plt.axvline(cutoff, color='k')
plt.xlim(0, 0.5*Fs)
plt.title("Lowpass Filter Frequency Response")
plt.xlabel('Frequency [Hz]')
plt.grid()
plt.show()
