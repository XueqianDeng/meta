################################################
# Train a model to predict cursor velocity from MAV
#
# Training data is generated by pointing_collection.py
################################################

from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.multioutput import MultiOutputRegressor
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pickle
from scipy import signal

subject = "Adrian4"
df = pd.read_csv("data/" + subject + "/point_training_AMHc.csv")
X = df.iloc[101: , :16]
y = df.iloc[100: , 16:18]
time = df.iloc[: , -1]
time = time.iloc[100:]  # remove first 100 samples to
time = time.reset_index(drop=True)

# set filter parameters
Fs = 144
b, a = signal.butter(N=5, Wn=3, btype='lowpass', fs=Fs)
zi = signal.lfilter_zi(b, a)
step = 100
Nchannels = 16
Nsamples = X.shape[0]
ze = np.zeros((300,2))


MAV_filtered = pd.DataFrame(index=np.arange(Nsamples - step),
                            columns=['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12',
                            'C13', 'C14', 'C15', 'C16'])

target = y.iloc[: , :]
target = target.reset_index(drop=True)

# filter data
#for i in range(Nchannels):
##    for j in range(Nsamples-step):
#        MAV_window = X.iloc[j:j + step, i]
#        window, _ = signal.lfilter(b, a, MAV_window, zi=zi * MAV_window.iloc[0])
#        MAV_filtered.iloc[j, i] = window[-1]
#
#MAV_filtered = MAV_filtered.iloc[1:, :]
time = time.reset_index(drop=True)

# MAV_filtered = MAV_filtered.diff()
# MAV_filtered = MAV_filtered.drop(MAV_filtered.index[0])

# compute time difference between samples
time = time.diff()
time = time.drop(time.index[0])

# compute difference in target positions between samples
target = target.diff()
target = target.drop(target.index[0])

# calculate velocities
velocity = target.divide(time, axis='index')
velocity.rename(columns={'x_pos': 'x_vel', 'y_pos': 'y_vel'})

print(target.size/2)
print(X.size/16)

# predict target velocity from MAV
#linear = LinearRegression().fit(MAV_filtered, target)
#y_pred = linear.predict(MAV_filtered)
linear = LinearRegression().fit(X, target)
y_pred = linear.predict(X)
print(y_pred.shape)
y_pred = np.concatenate((ze, y_pred), axis=0)

# save model to .pkl file
with open('data/' + subject + '/pointing_linear_vel_AMHc.pkl', 'wb') as f:
    pickle.dump(linear, f)

print(linear)

# show model fit to training data
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(target.iloc[:, 0], color="black")
plt.plot(y_pred[:, 0], color="red")
plt.xlabel('# samples')
plt.ylabel('x velocity (cm)')
plt.legend(['target', 'cursor'])

plt.subplot(2, 1, 2)
plt.plot(target.iloc[:, 1], color="black")
plt.plot(y_pred[:, 1], color="red")
plt.xlabel('# samples')
plt.ylabel('y velocity (cm)')
plt.show()




