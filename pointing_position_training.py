################################################
# Train a model to predict cursor position from MAV
#
# Training data is generated by pointing_collection.py
################################################

from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.multioutput import MultiOutputRegressor
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pickle
from scipy import signal

# import MAV data
subject = "Hokin"
df = pd.read_csv("data/" + subject + "/point_training_AMH.csv")
X = df.iloc[501: , :16]  # MAV
y = df.iloc[501: , 16:18]  # target positions
time = df.iloc[:, -1]  # time

# store data in data frame
Nchannels = 16
Nsamples = X.shape[0]
MAV_filtered = pd.DataFrame(index=np.arange(Nsamples),
                            columns=['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12',
                            'C13', 'C14', 'C15', 'C16'])
# AMH note - this filtering is making things worse. and slowing things down. don't think it's necessary anyway. commenting out
# set filter parameters
#Fs = 144  # sampling rate
#b, a = signal.butter(N=5, Wn=3, btype='lowpass', fs=Fs)
#zi = signal.lfilter_zi(b, a)
#step = 100

# filter the MAV
# NOTE: I haven't implemented the windowing correctly here. Should be shaving off the first samples off of the data,
# which is set by "step". I haven't gotten around to it yet. See pointing_velocity_training.py for better implementation
#for i in range(Nchannels):
#    for j in range(Nsamples):
#        MAV_window = X.iloc[j:j + step, i]
#        window, _ = signal.lfilter(b, a, MAV_window, zi=zi * MAV_window.iloc[0])
#        MAV_filtered.iloc[j, i] = window[-1]

# perform multiple linear regression
#linear = LinearRegression().fit(MAV_filtered, y)
#y_pred = linear.predict(MAV_filtered)
linear = LinearRegression().fit(X, y)
y_pred = linear.predict(X)

#print(y_pred)
print(y)

# save model as a .pkl file
with open('data/' + subject + '/pointing_linear_pos_AMH.pkl', 'wb') as f:
    pickle.dump(linear, f)

# plot the results of fitting the model to training data
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
#plt.plot(y.iloc[:, 0], color="black")
plt.plot([i for i in range(len(y))],y.iloc[:, 0], color="green")
plt.plot(y_pred[: , 0], color="red")
plt.xlabel('# samples')
plt.ylabel('x position (cm)')
plt.legend(['target', 'cursor'])

plt.subplot(2, 1, 2)
plt.plot([i for i in range(len(y))],y.iloc[:, 1], color="black")
plt.plot(y_pred[:, 1], color="red")
plt.xlabel('# samples')
plt.ylabel('y position (cm)')
plt.show()



